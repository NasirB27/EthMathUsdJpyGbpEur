// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";

contract DataConsumerV3 {
    AggregatorV3Interface internal dataFeed;

    address[] public funders;
    mapping(address => uint256) public addressToAmountFunded;

    function fund() public payable{
        // assuming a function getConversionRate() which returns uint value
        uint conversionRate = getPrice();
        // assuming a constant minimum_USD_JPY_GBP_EUR_CAD_CHF
        uint minimum_USD_JPY_GBP_EUR_CAD_CHF = 1; 
        require(conversionRate >= minimum_USD_JPY_GBP_EUR_CAD_CHF, "didn't have enough ETH"); 
        funders.push(msg.sender);
        addressToAmountFunded[msg.sender] += msg.value; // correct the typo in variable name
    }

   
    function getPrice() public view returns(uint) {
        // Implementation for getPrice
    }
}
